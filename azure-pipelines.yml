# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main            # rama que dispara la pipeline

# pool raíz ⇒ valor por omisión para todos los jobs
pool:
  name: SelfHostedAgentPools

# ───────── variables globales del pipeline ─────────


# ───────────────────────────────────────────
#  JOB 1  ·  TEST
# ───────────────────────────────────────────
jobs:
  # ── Job 1 ─ Test ───────────────────────────
  - job: Test
    displayName: "Build & Run Tests"
    steps:

      # 1 Ejecuta las pruebas (Cloud = BrowserStack)
      - script: 'gradlew clean cloud'
        displayName: 'Run Tests'
      #  continueOnError: true          # deja seguir al job aunque las pruebas fallen

  # ── Job 2 ─ Azure CLI ───────────────────────────
  - job: Azure
    dependsOn: Test
    condition: always()
    steps:
      # Agregar ruta de Azure CLI en las variables de entorno del agente
      - powershell: '$env:Path += ";C:\Program Files\Microsoft SDKs\Azure\CLI2\wbin"'
        displayName: 'Path Azure CLI'

  # ── Job 3 ─ Report ───────────────────────────
  - job: Reporte
    dependsOn: Azure
    condition: always()
    steps:
      # 2 Genera el reporte HTML/JSON
      - script: 'gradlew report'
        displayName: 'Generate Report'

      # 3 Copia SOLO el reporte (no todo el repo)
      - task: CopyFiles@2
        displayName: 'Copy Cucumber Report to Staging'
        inputs:
          SourceFolder: '$(system.defaultworkingdirectory)'
          Contents: '**/*'
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()

      # 4 Publica el artefacto de reporte
      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: FlexBusiness Mobile'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)'
          ArtifactName: FlexBusinessMobileTest
        condition: succeededOrFailed()

      # 5 Obtiene la storagekey ─ (opcional: solo si sigues usando blob estático)
      - task: AzureCLI@2
        displayName: 'Obtener clave de acceso a la cuenta de almacenamiento'
        inputs:
          azureSubscription: 'AzureResourceManagerServicePrincipalManual'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $storageAccountKey = az storage account keys list `
              --resource-group rg-qa-001 `
              --account-name  storageqa001 `
              --query '[0].value' --output tsv
            echo "##vso[task.setvariable variable=StorageAccountKey;issecret=true]$storageAccountKey"
        condition: succeededOrFailed()

      # 6 Sube el reporte al sitio estático (opcional)
      - task: AzureCLI@2
        displayName: 'Cargar los archivos de cucumber-report al contenedor'
        inputs:
          azureSubscription: 'AzureResourceManagerServicePrincipalManual'
          scriptType: 'ps'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az storage blob upload-batch `
              --account-name storageqa001 `
              --account-key  $(StorageAccountKey) `
              --destination  '$web' `
              --source       reports/FlexBusinessMobile/cucumber-html-reports `
              --type block
        condition: succeededOrFailed()

  # ───────────────────────────────────────────
  #  JOB 4  ·  COLLECTOR  (solo si Test falló)
  # ───────────────────────────────────────────
  - job: Collector
    displayName: "Collector Job"
    dependsOn: Reporte
    condition: failed('Test')
    pool: { name: SelfHostedAgentPools }

    steps:
      # 1) Descarga el artefacto publicado en el job Test
      - download: current
        artifact: FlexBusinessMobileTest          # ← nombre exacto del artifact

      # 2) Copia el directorio cucumber‑html‑reports + report.json
      - powershell: |
          Write-Host "Empaquetando artefactos de fallos…"
          
          # Ruta raíz del artifact descargado
          $artifactRoot = "$(Pipeline.Workspace)\FlexBusinessMobileTest"
          
          # Destino local (será publicado luego)
          $dest = "$(System.DefaultWorkingDirectory)\artifacts"
          New-Item -Path $dest -ItemType Directory -Force | Out-Null
          
          # Directorio HTML
          $reportDir = Join-Path $artifactRoot "reports\FlexBusinessMobile\cucumber-html-reports"
          if (Test-Path $reportDir) {
              Copy-Item -Recurse -Force $reportDir $dest
              Write-Host "Copiado $reportDir"
          } else {
              Write-Warning "No se encontró $reportDir"
          }
          
          # JSON (si existe)
          $json = Join-Path $artifactRoot "reports\report.json"
          if (Test-Path $json) {
              Copy-Item -Force $json $dest
              Write-Host "Copiado $json"
          } else {
              Write-Warning "report.json no encontrado"
          }
        displayName: "Copiar reportes fallidos"

      # 3) Publica los archivos para QA‑Copilot
      - task: PublishBuildArtifacts@1
        displayName: "Publicar FailArtifacts"
        inputs:
          pathToPublish: '$(System.DefaultWorkingDirectory)\artifacts'
          artifactName: FailArtifacts

  # ── JOB · INSTALL PYTHON ────────────────────────────────────────────────
  - job: InstallPython
    displayName: "Install Python 3.13 (self‑hosted agent)"
    pool: { name: SelfHostedAgentPools }

    steps:
      - powershell: |
          Write‑Host "Descargando instalador oficial de Python 3.13.3…"
          $url       = "https://www.python.org/ftp/python/3.13.3/python-3.13.3-amd64.exe"
          $installer = "$env:TEMP\python-installer.exe"
          Invoke-WebRequest -Uri $url -OutFile $installer
          
          Write‑Host "Instalando Python en modo silencioso…"
          Start-Process -FilePath $installer -ArgumentList `
              "/quiet InstallAllUsers=1 PrependPath=1" -Wait
          
          Write‑Host "Versión instalada:"
          python --version
        displayName: "Download & silent install"

  # ───────────────────────────────────────────
  #  JOB 5  ·  QA‑COPILOT  (IA RCA + PDF)
  # ───────────────────────────────────────────
  - job: QA_Copilot
    displayName: "AI Root‑Cause & Executive Report"
    dependsOn: Collector
    condition: succeeded('Collector')   # solo si se generaron fallos
    pool: { name: SelfHostedAgentPools }

    steps:
      # 1 Descarga los artefactos de fallos
      - download: current
        artifact: FailArtifacts

      # 2 Genera el RCA con GPT‑4o
      - task: PythonScript@0
        displayName: "Generar RCA (markdown)"
        inputs:
          scriptSource: inline
          script: |
            import os, subprocess, pathlib
            subprocess.run(
              "python scripts/generate_rca.py "
              "--cucumber FailArtifacts/cucumber.json "
              "--logs FailArtifacts/logs "
              "--output rca.md",
              shell=True, check=True
            )
        env:
          OPENAI_API_KEY: $(OPENAI_API_KEY)

      # 3 Convierte md → PDF (WeasyPrint)
      - script: |
          pip install weasyprint
          weasyprint rca.md rca.pdf
        displayName: "Convertir a PDF"

      # 4 Publica el PDF como artefacto
      - task: PublishBuildArtifacts@1
        displayName: "Publicar RCA_Report"
        inputs:
          PathtoPublish: 'rca.pdf'
          ArtifactName: RCA_Report

      # 5 Comenta el Pull Request con el resumen
      - bash: |
          python scripts/post_to_ado.py \
            --pr $(System.PullRequest.PullRequestId) \
            --file rca.md
        displayName: "Comentar RCA en PR"
        env:
          ADO_PAT: $(ADO_PAT)           # token con permiso para comentar PR